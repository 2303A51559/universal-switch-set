import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;


class CryptoUtils {
    private static final String ALGORITHM = "AES";

    public static SecretKey generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);
        keyGen.init(128);
        return keyGen.generateKey();
    }

    public static String encrypt(String plainText, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    public static String decrypt(String encryptedText, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
        return new String(decryptedBytes);
    }

    public static String keyToString(SecretKey key) {
        return Base64.getEncoder().encodeToString(key.getEncoded());
    }

    public static SecretKey stringToKey(String keyStr) {
        byte[] decodedKey = Base64.getDecoder().decode(keyStr);
        return new SecretKeySpec(decodedKey, 0, decodedKey.length, ALGORITHM);
    }
}


class KeyManager {
    private Map<String, String> keyStore = new HashMap<>();

    public void storeKey(String deviceId, String base64Key) {
        keyStore.put(deviceId, base64Key);
    }

    public String getKey(String deviceId) {
        return keyStore.get(deviceId);
    }

    public boolean hasKey(String deviceId) {
        return keyStore.containsKey(deviceId);
    }
}


class UniversalSwitch {
    private String deviceId;
    private KeyManager keyManager;

    public UniversalSwitch(String deviceId, KeyManager keyManager) {
        this.deviceId = deviceId;
        this.keyManager = keyManager;
    }

    public void initialize() throws Exception {
        if (!keyManager.hasKey(deviceId)) {
            SecretKey key = CryptoUtils.generateKey();
            keyManager.storeKey(deviceId, CryptoUtils.keyToString(key));
            System.out.println("Key generated for device: " + deviceId);
        }
    }

    public String secureSend(String data) throws Exception {
        SecretKey key = CryptoUtils.stringToKey(keyManager.getKey(deviceId));
        return CryptoUtils.encrypt(data, key);
    }

    public String secureReceive(String encryptedData) throws Exception {
        SecretKey key = CryptoUtils.stringToKey(keyManager.getKey(deviceId));
        return CryptoUtils.decrypt(encryptedData, key);
    }
}


public class Main {
    public static void main(String[] args) {
        try {
            KeyManager keyManager = new KeyManager();

           
            System.out.println("\n--- POSITIVE TEST ---");
            UniversalSwitch switch1 = new UniversalSwitch("switch-001", keyManager);
            switch1.initialize();
            String originalData = "Secure Metro Packet";
            String encrypted = switch1.secureSend(originalData);
            String decrypted = switch1.secureReceive(encrypted);

            System.out.println("Original   : " + originalData);
            System.out.println("Encrypted  : " + encrypted);
            System.out.println("Decrypted  : " + decrypted);

            
            System.out.println("\n--- NEGATIVE TEST 1: Wrong Key ---");
            SecretKey wrongKey = CryptoUtils.generateKey();
            try {
                String wrongDecrypted = CryptoUtils.decrypt(encrypted, wrongKey);
                System.out.println("Decrypted with wrong key: " + wrongDecrypted);
            } catch (Exception e) {
                System.out.println("ERROR: Cannot decrypt with wrong key (Expected)");
            }

           
            System.out.println("\n--- NEGATIVE TEST 2: Corrupted Encrypted Data ---");
            String corrupted = encrypted.substring(0, encrypted.length() - 4) + "1234";
            try {
                String corruptResult = switch1.secureReceive(corrupted);
                System.out.println("Decrypted corrupted data: " + corruptResult);
            } catch (Exception e) {
                System.out.println("ERROR: Cannot decrypt corrupted data (Expected)");
            }

            
            System.out.println("\n--- NEGATIVE TEST 3: Switch Without Key ---");
            UniversalSwitch switch2 = new UniversalSwitch("switch-002", keyManager);
            try {
                String result = switch2.secureSend("Test Packet");
                System.out.println("Encrypted by uninitialized switch: " + result);
            } catch (Exception e) {
                System.out.println("ERROR: Cannot encrypt without key (Expected)");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
